using System; using Acr.XamForms.SignaturePad; using PackingCygest.ViewModel; using Xamarin.Forms; using Xamarin.Forms.Xaml; using PackingCygest.Interface; using PackingCygest.Model; using PackingCygest.Utils; using System.Threading.Tasks;   namespace PackingCygest.View {     /// <summary>     /// Class Signature     /// </summary>     /// <seealso cref="Xamarin.Forms.ContentPage" />     [XamlCompilation(XamlCompilationOptions.Compile)]     public partial class Signature : ContentPage     {         private string _status;         private string _blankSignature = "";         public FileInfoModel InfoModel { get; }         public FileInfoDeliveryModel InfoModelDel { get; }         public string LblOk { get; private set; }         public string LblError { get; private set; }         public string LblSignatureSaveSuccessful { get; private set; }         public string LblInvalidSignature { get; private set; }         public string LblSuccess { get; private set; }         public string SignatureClearMsg { get; private set; }          private readonly ApplicationViewModel _appViewModel = new ApplicationViewModel();          /// <summary>         /// Initializes a new instance of the <see cref="Signature"/> class.         /// </summary>         public Signature(FileInfoModel info, string status)         {             InitializeComponent();             BindingContext = new SignatureViewModel(new PageService(), info);             InfoModel = info;             _status = status;             HandleTranslation(_appViewModel.DefaultedCultureInfo);             OnAppearing();             SignatureView.ClearPath = !SignatureView.ClearPath;         }          /// <summary>         /// Initializes a new instance of the <see cref="Signature" /> class.         /// </summary>         /// <param name="info">The information.</param>         /// <param name="status">The status.</param>         public Signature(FileInfoDeliveryModel info, string status)         {             InitializeComponent();             BindingContext = new SignatureViewModel(new PageService(), info);             InfoModelDel = info;             _status = status;             HandleTranslation(_appViewModel.DefaultedCultureInfo);              OnAppearing();          }          /// <summary>         /// Handles the translation.         /// </summary>         /// <param name="cultureInfo">The culture information.</param>         public void HandleTranslation(string cultureInfo)         {             LblOk = Localize.GetString("lblOK", cultureInfo);             LblError = Localize.GetString("lblError", cultureInfo);             LblSignatureSaveSuccessful = Localize.GetString("LblSignatureSaveSuccessful", cultureInfo);             LblInvalidSignature = Localize.GetString("LblInvalidSignature", cultureInfo);             LblSuccess = Localize.GetString("LblSuccess", cultureInfo);             SignatureClearMsg = Localize.GetString("MsgSignatureClear", cultureInfo);          }          /// <summary>         /// Handles the OnClicked event of the BtnSave control.         /// </summary>         /// <param name="sender">The source of the event.</param>         /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>         private void BtnSave_OnClicked(object sender, EventArgs e)         {             var imgPath = DependencyService.Get<ISignService>().Sign();             if (_status.Equals("Loading"))             {                 var vm = new SignatureViewModel(new PageService(), InfoModel);                 SignatureView.SavedImagePath = imgPath;                  string imageBase64 = DependencyService.Get<IFileMgr>().GetBase64ImageString(imgPath);                  if (Device.RuntimePlatform == Device.Android)                 {                     if (imageBase64.Equals(_blankSignature))                     {                         DisplayAlert(LblError, LblInvalidSignature, LblOk);                         SignatureView.ClearPath = !SignatureView.ClearPath;                     }                     else                     {                         vm.SaveImagePath(imgPath, _status);                         DisplayAlert(LblSuccess, LblSignatureSaveSuccessful, LblOk);                         Navigation.PushAsync(new View.CompletedPage(_status));                     }                 }                  if (Device.RuntimePlatform == Device.iOS)                 {                     if (imageBase64.Equals(_blankSignature))                     {                         DisplayAlert(LblError, LblInvalidSignature, LblOk);                     }                     else                     {                         vm.SaveImagePath(imgPath, _status);                         DisplayAlert(LblSuccess, LblSignatureSaveSuccessful, LblOk);                         Navigation.PushAsync(new View.CompletedPage(_status));                     }                 }              }             else             {                 var vm = new SignatureViewModel(new PageService(), InfoModelDel);                 SignatureView.SavedImagePath = imgPath;                  string imageBase64 = DependencyService.Get<IFileMgr>().GetBase64ImageString(imgPath);                  if (Device.RuntimePlatform == Device.Android)                 {                     if (imageBase64.Equals(_blankSignature))                     {                         DisplayAlert(LblError, LblInvalidSignature, LblOk);                         SignatureView.ClearPath = !SignatureView.ClearPath;                     }                     else                     {                         vm.SaveImagePath(imgPath, _status);                         DisplayAlert(LblSuccess, LblSignatureSaveSuccessful, LblOk);                         Navigation.PushAsync(new View.CompletedPage(_status));                     }                 }                  if (Device.RuntimePlatform == Device.iOS)                 {                     if (imageBase64.Equals(_blankSignature))                     {                         DisplayAlert(LblError, LblInvalidSignature, LblOk);                     }                     else                     {                         vm.SaveImagePath(imgPath, _status);                         DisplayAlert(LblSuccess, LblSignatureSaveSuccessful, LblOk);                         Navigation.PushAsync(new View.CompletedPage(_status));                     }                 }             }         }          /// <summary>         /// Handles the Click event of the btnClear control.         /// </summary>         /// <param name="sender">The source of the event.</param>         /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>         private void btnClear_Click(object sender, EventArgs e)         {             SignatureView.ClearPath = !SignatureView.ClearPath;             DisplayAlert(LblSuccess, SignatureClearMsg, LblOk);         }           /// <summary>         /// Gets blank signature image on page appearing         /// </summary>         protected override async void OnAppearing()         {                          await Task.Delay(1000);             if (_status.Equals("Loading"))             {                                             var imgPath = DependencyService.Get<ISignService>().Sign();                 var vm = new SignatureViewModel(new PageService(), InfoModel);                 SignatureView.SavedImagePath = imgPath;                 _blankSignature = DependencyService.Get<IFileMgr>().GetBase64ImageString(imgPath);                 SignatureView.ClearPath = !SignatureView.ClearPath;                 base.OnAppearing();             }             else             {                 var imgPath = DependencyService.Get<ISignService>().Sign();                 var vm = new SignatureViewModel(new PageService(), InfoModelDel);                 SignatureView.SavedImagePath = imgPath;                 _blankSignature = DependencyService.Get<IFileMgr>().GetBase64ImageString(imgPath);                 SignatureView.ClearPath = !SignatureView.ClearPath;                 base.OnAppearing();             }                                 }     } } 